@page "/login"
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using RoutePlanning.Application.Users.Queries.AuthenticatedUser
@using RoutePlanning.Client.Web.Authentication
@using RoutePlanning.Domain.Users

<LoginDropdown />

<SimpleModal Title="Login" IsOpen="@showModal" IsOpenChanged="@OnModalClose">
	<AuthorizeView>
		<NotAuthorized>
			<div class="row g-1">
				@if (ShowAuthError)
				{
					<div class="col-auto"><div class="error text-danger m-2">Invalid login credentials</div></div>
				}
				<div class="col"><input type="text" placeholder="Username" class="form-control" @bind="Username"></div>
				<div class="col"><input type="password" class="form-control" placeholder="Password" @bind="Password"></div>
                <div class="col-auto">
                    <button type="button" class="btn btn-primary" @onclick="Login">Login</button>
                </div>

			</div>
		</NotAuthorized>
		<Authorized>
			<span class="m-2">Hello, @context.User.Identity?.Name!</span>
			<button class="btn btn-primary ml-2" @onclick="Logout">Logout</button>
		</Authorized>
	</AuthorizeView>
</SimpleModal>

@code {
	private bool showModal = false;
	private string Username { get; set; } = string.Empty;
	private string Password { get; set; } = string.Empty;
	private AuthenticatedUser? User { get; set; }
	private bool ShowAuthError { get; set; } = false;

	[Inject]
	private SimpleAuthenticationStateProvider AuthStateProvider { get; set; } = default!;

	[Inject]
	private IMediator Mediator { get; set; } = default!;

	public void ToggleModal()
	{
		showModal = true;
	}

	private void OnModalClose(bool isOpen)
	{
		showModal = isOpen;
	}

	private async Task Login()
	{
		User = await Mediator.Send(new AuthenticatedUserQuery(Username, Password), CancellationToken.None);

		ShowAuthError = User is null;

		if (User is not null)
		{
			await AuthStateProvider.SetAuthenticationStateAsync(new UserSession(User.Username));
			showModal = false; // Close the modal on successful login
		}
	}

	private async Task Logout()
	{
		await AuthStateProvider.ClearAuthenticationStateAsync();
		ShowAuthError = false;
	}
}
