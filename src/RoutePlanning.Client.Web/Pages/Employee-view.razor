@page "/employee-view"
@inject MediatR.IMediator Mediator
@using RoutePlanning.Application.Locations.Queries.SelectableLocationList

<h3>Employee View - Pricing Matrix</h3>

<p>Here you can view and update the pricing for different package sizes and weight categories in $.</p>

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Size</th>
        @foreach (var weightCategory in WeightCategories)
        {
            <th>@weightCategory</th>
        }
    </tr>
    </thead>
    <tbody>
    @foreach (var size in Sizes)
    {
        <tr>
            <td>@size</td>
            @foreach (var weightCategory in WeightCategories)
            {
                <td>
                    <input type="number" @bind="PriceMatrix[size][weightCategory]" />
                </td>
            }
        </tr>
    }
    </tbody>
</table>

<h3>Locations Overview</h3>
<p>Location availability:</p>
<table class="table table-striped">
    <thead>
    <tr>
        <th>Location Name</th>
        <th>Availability</th>
    </tr>
    </thead>
    <tbody>
    @if (Locations != null && Locations.Any())
    {
        @foreach (var location in Locations)
        {
            <tr>
                <td>@location.Name</td>
                <td>
                    <!-- Toggle availability purely for visual purposes -->
                    <input type="checkbox" @bind="location.IsAvailable" />
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="2">No locations found.</td>
        </tr>
    }
    </tbody>
</table>



@code {
    // Define sizes and weight categories as lists -- <button class="btn btn-primary" @onclick="UpdatePrices">Update Prices</button>
    private List<string> Sizes = new() { "A", "B", "C" };
    private List<string> WeightCategories = new() { "<1kg", "1-5kg", ">5kg" };

    // Dictionary to hold the price matrix data
    private Dictionary<string, Dictionary<string, decimal>> PriceMatrix = new()
    {
        { "A", new Dictionary<string, decimal> { { "<1kg", 40 }, { "1-5kg", 60 }, { ">5kg", 80 } } },
        { "B", new Dictionary<string, decimal> { { "<1kg", 48 }, { "1-5kg", 68 }, { ">5kg", 88 } } },
        { "C", new Dictionary<string, decimal> { { "<1kg", 80 }, { "1-5kg", 100 }, { ">5kg", 120 } } }
    };

	private List<SelectableLocationViewModel> Locations { get; set; } = new List<SelectableLocationViewModel>();

	// Load locations on page initialization
	protected override async Task OnInitializedAsync()
	{
		// Fetch locations from the database
		var databaseLocations = await Mediator.Send(new SelectableLocationListQuery(), CancellationToken.None);

		// Map each database location to the local view model, adding a default IsAvailable state
		Locations = databaseLocations.Select(loc => new SelectableLocationViewModel
			{
				Name = loc.Name,
				IsAvailable = true // Set initial state as unchecked or desired visual state
			}).ToList();
	}

	// Define a local view model for the front end to add the IsAvailable toggle
	public class SelectableLocationViewModel
	{
		public string? Name { get; set; }

		// UI-only property for aesthetic toggle of availability
		public bool IsAvailable { get; set; }
	}

    /*private IEnumerable<SelectableLocation>? Locations { get; set; }

    // Load locations on page initialization
    protected override async Task OnInitializedAsync()
    {
        Locations = await Mediator.Send(new SelectableLocationListQuery(), CancellationToken.None);
    }*/

    /*private async Task UpdatePrices()
    {
        // Logic to update prices in the backend using a query.
        // Placeholder for the update query or API call to send updated prices.
        Console.WriteLine("Prices updated!");
        // Replace this with actual logic to send data to the backend
    }*/
}